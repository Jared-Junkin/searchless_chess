---
model_load_dir: "./Llama/ckpts_new/ckpt100000/"
tokenizer_load_dir: "./Llama/ckpts_new/ckpt100000/"
policy: "language"
batch_size: 32                # if gradient_accumulation_steps > 1, this is the micro-batch size
num_return_buckets: 128                     # legacy from deepmind code. not used.
shuffle: True
worker_count: 2                       # 
max_context_length: 1024                    # reduce memory overhead by limiting context lengths
attn_method: "attend_to_prev_answers"
pad_token: "<|pad|>"
bos_token: "<|begin_of_text|>"
eot_token: "<|end_of_text|>"
out_dir: '/workspace/searchless_chess/src/Llama/ckpts_accuracy_full/'
eval_interval: 5000
save_interval: 20000
log_interval: 10
eval_iters: 20
eval_only: False                          # if True, script exits right after the first eval
always_save_checkpoint: True               # if True, always save a checkpoint after each eval
log_path: "/workspace/searchless_chess/src/Llama/logs/full_training_improve_acc.log"
LORA: False
wandb_log: False
# tensorboard logging
tens_log: False
tens_log_dir: "/workspace/searchless_chess/logs/" # run this command: screen -dmS tens tensorboard --logdir=/workspace/searchless_chess/logs/ --port=6006

# data
gradient_accumulation_steps: 4             # used to simulate larger batch sizes

# adamw optimizer
learning_rate: 0.00006                      # max learning rate
max_iters: 500000                          # total number of training iterations
weight_decay: 0
beta1: 0.9
beta2: 0.95
grad_clip: 1.0                             # clip gradients at this value, or disable if == 0.0
# f2 regularize
F2_regularization: False
f2_lambda: 0.0001 # penalty for f2 regularization # f2_warmup_iters, f2_decay_iters, f2_lambda, f2_lambda_end
f2_lambda_end: 0.000005
f2_decay_iters: 40000
f2_warmup_iters: 2000
# learning rate decay settings
decay_lr: True                             # whether to decay the learning rate
warmup_iters: 1000                         # how many steps to warm up for
lr_decay_iters: 500000                     # should be ~= max_iters per Chinchilla
min_lr: 0.000008                            # minimum learning rate, should be ~= learning_rate/10 per Chinchilla

# DDP settings
backend: 'nccl'                            # 'nccl', 'gloo', etc.

# system
device_type: 'cuda'
device: 'cuda'                             # examples: 'cpu', 'cuda', 'cuda:0', 'cuda:1' etc., or try 'mps' on macbooks
dtype: 'bfloat16'                          # 'float32', 'bfloat16', or 'float16', the latter will auto implement a GradScaler
compile: True                              # use PyTorch 2.0 to compile the model to be faster (jared is temporarily setting to false for debugging purposes.)
description: "Achieving master level performance. going for grandmaster by extending training another 500,000 iters"